#include <iostream>
#include <Windows.h>



// DecryptTOCKey decrypts the 128-byte crypto key back into the 32-byte SHA3 hash key.
typedef void (*__cdecl DecryptTOCKey_t)(unsigned char* output, unsigned char* input);

int main()
{
    auto hDll = LoadLibraryA("MHRPakDecrypt.dll");
    if (hDll == nullptr) {
        return 1;
    }

    auto DecryptTOCKey = reinterpret_cast<DecryptTOCKey_t>(GetProcAddress(hDll, "DecryptTOCKey"));
    if (DecryptTOCKey == nullptr) {
        return 1;
    }

    unsigned char input_key_1[128] = {
        0xC8, 0x39, 0x9C, 0x72, 0xD1, 0xA3, 0x9B, 0x08, 0xA0, 0xEB, 0x18, 0x67, 0xB9, 0xBF, 0x05, 0x13,
        0x44, 0xA2, 0x30, 0x78, 0x6A, 0x74, 0xDE, 0x6F, 0xB6, 0xF3, 0x7B, 0x8B, 0x05, 0x62, 0x1F, 0x15,
        0x29, 0xBF, 0x43, 0x65, 0xA8, 0xA2, 0xD1, 0x06, 0xAC, 0xCB, 0xC6, 0xF9, 0xFD, 0x89, 0xBC, 0xCE,
        0x87, 0xE0, 0xCB, 0x28, 0x91, 0xB8, 0x37, 0xA1, 0x08, 0x05, 0xF4, 0x63, 0xC1, 0x7F, 0x13, 0x41,
        0x6D, 0xDB, 0x6B, 0x74, 0xF9, 0x43, 0x26, 0x18, 0x5A, 0xBB, 0x0F, 0xBB, 0xA9, 0x58, 0x16, 0xE3,
        0x4C, 0x8C, 0xE7, 0xF4, 0x77, 0xD3, 0x27, 0x36, 0x81, 0x16, 0x08, 0x7E, 0x11, 0xFD, 0xB4, 0xF9,
        0x09, 0x6A, 0x31, 0x4A, 0x30, 0xA1, 0xB1, 0x6F, 0x4C, 0x32, 0x7C, 0xA9, 0x8A, 0xDF, 0x1C, 0xE8,
        0x86, 0x06, 0xEA, 0xDC, 0x22, 0x8B, 0xDB, 0x4E, 0x95, 0x12, 0x70, 0x42, 0x95, 0x2E, 0x37, 0x98};
    unsigned char expected_output_1[32] = {
        0x66, 0xBF, 0x3E, 0xAA, 0xE9, 0xB0, 0x82, 0x86, 0xE2, 0xDE, 0x8F, 0x9D, 0x21, 0x99, 0x3E, 0x78,
        0xC7, 0xAE, 0xF6, 0xDF, 0x06, 0x93, 0x47, 0x94, 0x2E, 0x1D, 0x0F, 0xCA, 0xAC, 0x81, 0x7A, 0x67};

    unsigned char input_key_2[128] = {
        0x46, 0x6D, 0x41, 0x57, 0x76, 0xFD, 0x71, 0x2C, 0xC7, 0x1A, 0x12, 0xE7, 0x68, 0x81, 0x7B, 0xF6,
        0x8D, 0xE7, 0x36, 0x1F, 0x27, 0x89, 0x45, 0x16, 0xD7, 0x7E, 0x95, 0x7A, 0x35, 0x02, 0x39, 0x73,
        0xD5, 0x3C, 0xE0, 0x82, 0x39, 0xF6, 0x28, 0xD5, 0x5B, 0x1C, 0x07, 0xF6, 0x41, 0x5D, 0xCD, 0x3C,
        0xD6, 0x1D, 0x1A, 0x00, 0x24, 0xFF, 0xCD, 0x2B, 0x2E, 0x50, 0xBA, 0x5C, 0x0C, 0xAA, 0x4C, 0xF5,
        0x98, 0x3A, 0x7D, 0x89, 0x2C, 0xDC, 0x63, 0x3E, 0x8E, 0x3F, 0x54, 0xFF, 0xE4, 0xF6, 0x76, 0x51,
        0x4B, 0xCD, 0x16, 0x9F, 0xF3, 0x7D, 0x05, 0x65, 0xBF, 0xED, 0xC1, 0xC1, 0x07, 0x47, 0xC2, 0x66,
        0x42, 0x2B, 0x49, 0x35, 0x34, 0x5C, 0x9A, 0xAC, 0x39, 0x38, 0x0D, 0xE9, 0xDA, 0x12, 0x68, 0x92,
        0x49, 0xFD, 0xED, 0x28, 0x37, 0x71, 0x06, 0xE1, 0xBA, 0x41, 0xB8, 0xB6, 0xF5, 0x1C, 0x31, 0x50};
    unsigned char expected_output_2[32] = {
        0xF5, 0x35, 0xB0, 0x81, 0x67, 0x2A, 0xE2, 0x7C, 0xE1, 0xC5, 0xC0, 0x99, 0xDD, 0xAD, 0x4D, 0x50,
        0x48, 0xDD, 0xAE, 0x85, 0x7F, 0xD9, 0x8B, 0x0B, 0x29, 0x6C, 0x48, 0x49, 0x66, 0xA6, 0x93, 0x59};

    // Both the input and output should be 128-byte buffers,
    // regardless of the output only being in the first 32 bytes.
    unsigned char output_1[128] = { 0 };
    DecryptTOCKey(output_1, input_key_1);
    std::cout << "Got expected results for v3.6.1.0 key:" << (std::memcmp(output_1, expected_output_1, 32) == 0) << "\n";

    // Both the input and output should be 128-byte buffers,
    // regardless of the output only being in the first 32 bytes.
    unsigned char output_2[128] = { 0 };
    DecryptTOCKey(output_2, input_key_2);
    std::cout << "Got expected results for v3.6.1.1 key:" << (std::memcmp(output_2, expected_output_2, 32) == 0) << "\n";


    std::cin.get();
}
